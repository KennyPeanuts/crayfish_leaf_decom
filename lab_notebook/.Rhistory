fun.max = function(x) mean(x) + sd(x)
) +
theme_classic()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("Native", "Invasive", "Low", "Equal", "High"))
k.list$treat
# run the function
k.list <- k.tank()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "I", "L", "E", "H"))
k.list$treat
:w
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(k^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression("k (days)"^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression("k (days"^{-1}")"),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression("k" days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
width = 0.1,
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " "
)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive")
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Nnumbers", "High Invasive"),
size = 20,
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic()
par(las = 1, cex = 1)
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "N", xlim = c(0, 25), ylim = c(0, 5), pch = 8, col = "gray40", ylab = "ln Percent AFDM Remaining + 1", xlab = "Days in Tank")
abline(N.k, lty = 1, lwd = 4)
points(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "I", pch = 3, col = "gray40" )
abline(I.k, lty = 3, lwd = 4)
points(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "L", pch = 6, col = "gray40")
abline(L.k, lty = 2, lwd = 4)
points(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "E", pch = 5, col = "gray40")
abline(E.k, lty = 4, lwd = 4)
points(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "H", pch = 4, col = "gray40")
abline(H.k, lty = 5, lwd = 4)
legend(0, 2, c("Native Only", "Invasive Only", "Low Invasive", "Equal Invasive", "High Invasive"), pch = c(8, 3, 6, 5, 4), lty = c(1, 3, 2, 4, 5), lwd = 2)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic()
x
rm(x)
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic(
base_size = 15
)
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic(
base_size = 25
)
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic(
base_size = 55
)
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic()
ggexport(k_by_treat, width = 7, height = 7, filename = "k_by_treat.pdf")
par(las = 1, mfcol= c(5, 1), mar = c(3, 15, 0, 15), oma = c(2, 2, 2, 2))
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "N", xlim = c(0, 25), ylim = c(0, 5), pch = 19, col = "gray40", ylab = " ", xaxt = 'n', xlab = " ")
abline(N.k, lty = 1, lwd = 2)
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "I", ylim = c(0, 5), xlim = c(0, 25), xlab = " ", xaxt = 'n', ylab = " ", pch = 19, col = "gray40" )
abline(I.k, lty = 1, lwd = 2)
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "L", ylim = c(0, 5), xlim = c(0, 25),  xlab = " ", xaxt = 'n', ylab = "Nautral Log of Percent AFDM Remaining + 1", pch = 19, col = "gray40")
abline(L.k, lty = 1, lwd = 2)
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "E", ylim = c(0, 5), xlim = c(0, 25),  xlab = " ", xaxt = 'n', ylab = " ", pch = 19, col = "gray40")
abline(E.k, lty = 1, lwd = 2)
plot(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "H", ylim = c(0, 5), xlim = c(0, 25),  ann = F, pch = 19, col = "gray40")
abline(H.k, lty = 1, lwd = 2)
title(xlab = "Days in the Tank", line = 2)
t.test(k.list$k[k.list$treat == "N"], k.list$k[k.list$treat == "I"])
library("lmerTest")
install.packages("lmerTest")
library("lmerTest")
(k.mod <- lmer(percAFDM.rem ~ 1 + days.elapsed * treatment + (1|BagTank), data = leaf.AFDM))
anova(k.mod)
~~~~
### Plot by Tank
plot(percAFDM.rem ~ BagTank, data = leaf.AFDM, subset = days.elapsed == "3", pch = 19, col = 1, ylim = c(0, 110) )
plot(percAFDM.rem ~ BagTank, data = leaf.AFDM, subset = days.elapsed == "3", pch = 19, col = 1, ylim = c(0, 110) )
plot(percAFDM.rem ~ BagTank, data = leaf.AFDM, subset = days.elapsed == "3", pch = 19, col = 1, ylim = c(0, 110) )
points(percAFDM.rem ~ BagTank, data = leaf.AFDM, subset = days.elapsed == "10", pch = 19, col = 2, ylim = c(0, 110) )
points(percAFDM.rem ~ BagTank, data = leaf.AFDM, subset = days.elapsed == "24", pch = 19, col = 3, ylim = c(0, 110) )
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Invasive", "Equal Numbers", "High Invasive"),
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Density", "Equal Density", "High Density"),
) +
theme_classic()
# run the function
k.list <- k.tank()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "L", "E", "H", "I"))
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Invasive Only", "Low Density", "Equal Density", "High Density"),
) +
theme_classic()
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
)
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only"),
) +
theme_classic()
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only"),
) +
theme_classic()
ggexport(k_by_treat, width = 7, height = 7, filename = "k_by_treat.pdf")
~~~~
summary(L.k)
ysi <- read.table("./data/tank_YSI.csv", header = T, sep = ",")
chl <- read.table("./data/tank_chl.csv", header = T, sep = ",")
treat <- read.table("./data/tank_map.csv", header = T, sep = ",")
chl <- merge(chl, treat, by = "tank")
chl.trunk <- chl
chl.trunk$Chl[chl.trunk$Chl < 0 ] <- NA
chl.trunk <- chl.trunk[chl.trunk$tank != 3 & chl.trunk$tank != 4,]
days.elapsed <- as.numeric(as.Date(chl.trunk$Date) - as.Date("2016-06-03"))
(chl.mod <- lmer(log(Chl) ~ 1 + days.elapsed * treatment + (1|tank), data = chl.trunk))
