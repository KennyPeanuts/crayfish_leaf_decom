) +
scale_x_discrete(labels = c("No Addition", "+N+P")) +
geom_point(
mapping = aes(x = 0.5, y = 45.13),
size = 2,
col = 2
) +
# adds the initial percent C to the plot
#coord_cartesian(
#   ylim = c(-5, 10)
# ) +
theme_classic()
percC_by_treat_f4 <- ggarrange(percC.by.glucose.plot, percC.by.nutrients.plot, ncol = 1, nrow = 2)
percC_by_treat_f4
percC.by.nutrients.plot <-
ggplot(data = CN, mapping = aes(y = perc_C, x = factor(Nutrients))) +
geom_jitter(
col = 8,
size = 2,
width = 0.1
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Incubation
) +
labs(
x = " ",
y = "Percent C"
) +
scale_x_discrete(labels = c("No Addition", "+N+P")) +
geom_point(
mapping = aes(x = 0.5, y = 45.13),
size = 2,
pch = 1
) +
# adds the initial percent C to the plot
#coord_cartesian(
#   ylim = c(-5, 10)
# ) +
theme_classic()
percC_by_treat_f4 <- ggarrange(percC.by.glucose.plot, percC.by.nutrients.plot, ncol = 1, nrow = 2)
percC_by_treat_f4
ggexport(percC_by_treat_f4, width = 7, height = 7, filename = "percC_by_treat_f4.pdf")
percN.by.glucose.plot <-
ggplot(data = CN, mapping = aes(y = perc_N, x = factor(Glucose))) +
geom_jitter(
col = 8,
size = 2,
width = 0.1
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Incubation
) +
labs(
x = " ",
y = "Percent N"
) +
scale_x_discrete(labels = c("No Addition", "+Glucose")) +
geom_point(
mapping = aes(x = 0.5, y = 0.09850),
size = 2,
pch = 1
) +
# adds the initial percent N to the plot
#coord_cartesian(
#   ylim = c(-5, 10)
# ) +
theme_classic()
percN.by.nutrients.plot <-
ggplot(data = CN, mapping = aes(y = perc_N, x = factor(Nutrients))) +
geom_jitter(
col = 8,
size = 2,
width = 0.1
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Incubation
) +
labs(
x = " ",
y = "Percent N"
) +
scale_x_discrete(labels = c("No Addition", "+N+P")) +
geom_point(
mapping = aes(x = 0.5, y = 0.09850),
size = 2,
pch = 1
) +
# adds the initial percent N to the plot
#coord_cartesian(
#   ylim = c(-5, 10)
# ) +
theme_classic()
percN_by_treat_f5 <- ggarrange(percN.by.glucose.plot, percN.by.nutrients.plot, ncol = 1, nrow = 2)
percN_by_treat_f5
ggexport(percN_by_treat_f5, width = 7, height = 7, filename = "percN_by_treat_f5.pdf")
erg <- read.table("./data/ergosterol.csv", header = T, sep = ",")
leaf_mass14 <- read.table("./data/leaf_LOI_week14.csv", header = T, sep = ",")
ErgLeaf <- erg$Erg / erg$LeafNum
Location <- c(rep(c(rep("Sed", 4), rep("Top", 4)), 8))
Glucose <- c(rep("N", 16), rep("Y", 16), rep("N", 16), rep("Y", 16))
Nutrient <- rep(c(rep("N", 8), rep("Y", 8)), 4)
Weeks <- c(rep("Fourteen Weeks", 32), rep("Two Weeks", 32))
Weeks <- factor(Weeks, levels = c("Two Weeks", "Fourteen Weeks"))
erg <- data.frame(erg, Weeks, ErgLeaf, Location, Glucose, Nutrient)
erg.diff.2 <- erg$ErgLeaf[erg$HarvestDate == "11/12/18" & erg$Location == "Top"] - erg$ErgLeaf[erg$HarvestDate == "11/12/18" & erg$Location == "Sed"]
erg.diff.14 <- erg$ErgLeaf[erg$HarvestDate == "2/7/19" & erg$Location == "Top"] - erg$ErgLeaf[erg$HarvestDate == "2/7/19" & erg$Location == "Sed"]
treat.diff <- c(rep("NGNN", 4), rep("NGYN", 4), rep("YGNN", 4), rep("YGYN", 4))
glucose.diff <- c(rep("N", 8), rep("Y", 8))
nutrients.diff <- c(rep("N", 4), rep("Y", 4), rep("N", 4), rep("Y", 4))
erg.diff <- data.frame(treat.diff, glucose.diff, nutrients.diff, erg.diff.2, erg.diff.14)
erg.diff.resp <- c(erg.diff.2, erg.diff.14)
treat.diff.comb <- c(treat.diff, treat.diff)
glucose.diff.comb <- c(glucose.diff, glucose.diff)
nutrients.diff.comb <- c(nutrients.diff, nutrients.diff)
weeks.comb <- c(rep("Two Weeks", 16), rep("Fourteen Weeks", 16))
weeks.comb <- factor(weeks.comb, levels = c("Two Weeks", "Fourteen Weeks")) # this puts the factors in the correct order with two first.
erg.diff.comb <- data.frame(weeks.comb, treat.diff.comb, glucose.diff.comb, nutrients.diff.comb, erg.diff.resp)
erg.by.week <- ggplot(erg, mapping = aes(y = ErgLeaf, x = factor(Location))) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Weeks
) +
labs(
y = expression("Ergosterol Mass ("*mu*"g / leaf disc)"),
x = " "
) +
theme_classic()
erg_by_week_f6 <- ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
erg.diff.by.week <- ggplot(erg.diff.comb, mapping = aes(y = erg.diff.resp, x = weeks.comb)) +
geom_hline(
yintercept = 0
) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " ",
y = expression("Ergosterol Difference ("*mu*"g / leaf disc)")
) +
scale_x_discrete(
labels = c(" ", " ")
) +
theme_classic()
erg_by_week_f6 <- ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
erg_by_week_f6
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
erg.diff.by.week <- ggplot(erg.diff.comb, mapping = aes(y = erg.diff.resp, x = weeks.comb)) +
geom_hline(
yintercept = 0
) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " ",
y = expression("Ergosterol Difference ("*mu*"g / leaf disc)")
) +
scale_x_discrete(
labels = c("Sediment Leaves", "Water Leaves")
) +
theme_classic()
erg.by.week <- ggplot(erg, mapping = aes(y = ErgLeaf, x = factor(Location))) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Weeks
) +
labs(
y = expression("Ergosterol Mass ("*mu*"g / leaf disc)"),
x = " "
) +
scale_x_discrete(
labels = c("Two Weeks", "Fourteen Weeks")
) +
theme_classic()
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
erg.diff.by.week <- ggplot(erg.diff.comb, mapping = aes(y = erg.diff.resp, x = weeks.comb)) +
geom_hline(
yintercept = 0
) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
x = " ",
y = expression("Ergosterol Difference ("*mu*"g / leaf disc)")
) +
scale_x_discrete(
labels = c("Two Weeks", "Fourteen Weeks")
) +
theme_classic()
erg.by.week <- ggplot(erg, mapping = aes(y = ErgLeaf, x = factor(Location))) +
geom_jitter(
col = 8,
width = 0.05
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Weeks
) +
labs(
y = expression("Ergosterol Mass ("*mu*"g / leaf disc)"),
x = " "
) +
scale_x_discrete(
labels = c("Sediment Leaves", "Water Leaves")
) +
theme_classic()
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
#erg_by_week_f6 <-
ggarrange(erg.by.week, erg.diff.by.week, ncol = 1, nrow = 2)
ggexport(erg_by_week_f6, width = 7, height = 7, filename = "erg_by_week_f6.pdf")
library("tidyverse")
library("ggpubr")
leaf.initial <- read.table("./data/initial_leaf_mass.csv", header = T, sep = ",")
leaf.T1 <- read.table("./data/T1_leaf_mass.csv", header = T, sep = ",")
leaf.T2 <- read.table("./data/T2_leaf_mass.csv", header = T, sep = ",")
leaf.T3 <- read.table("./data/T3_leaf_mass.csv", header = T, sep = ",")
setwd("~/current_research/crayfish_leaf_decom/lab_notebook")
leaf.initial <- read.table("./data/initial_leaf_mass.csv", header = T, sep = ",")
leaf.T1 <- read.table("./data/T1_leaf_mass.csv", header = T, sep = ",")
leaf.T2 <- read.table("./data/T2_leaf_mass.csv", header = T, sep = ",")
leaf.T3 <- read.table("./data/T3_leaf_mass.csv", header = T, sep = ",")
leaf.T1 <- merge(leaf.T1, treat, by.x = "BagTank", by.y = "tank")
leaf.T2 <- merge(leaf.T2, treat, by.x = "BagTank", by.y = "tank")
leaf.T3 <- merge(leaf.T3, treat, by.x = "BagTank", by.y = "tank")
initialDM <- leaf.initial$CrucLeafDM - leaf.initial$CrucMass
initialAM <- leaf.initial$CrucAM - leaf.initial$CrucMas
AFDM <- initialDM - initialAM
leaf.initial <- data.frame(leaf.initial, AFDM)
mean.initial.AFDM <- mean(AFDM)
T1DM <- leaf.T1$CrucLeafDM - leaf.T1$CrucMass
T1AM <- leaf.T1$CrucAM - leaf.T1$CrucMass
AFDM <- T1DM - T1AM
leaf.T1 <- data.frame(leaf.T1, AFDM)
T2DM <- leaf.T2$CrucLeafDM - leaf.T2$CrucMass
T2AM <- leaf.T2$CrucAM - leaf.T2$CrucMass
AFDM <- T2DM - T2AM
leaf.T2 <- data.frame(leaf.T2, AFDM)
T3DM <- leaf.T3$CrucLeafDM - leaf.T3$CrucMass
T3AM <- leaf.T3$CrucAM - leaf.T3$CrucMass
AFDM <- T3DM - T3AM
leaf.T3 <- data.frame(leaf.T3, AFDM)
# create a single data frame with the T1 - T3 AFDM
leaf.AFDM.raw <- rbind(leaf.T1, leaf.T2, leaf.T3)
# remove tanks 3 and 4 from the dataset
leaf.AFDM <- leaf.AFDM.raw[leaf.AFDM.raw$BagTank != 3 & leaf.AFDM.raw$BagTank != 4,]
# convert to percent remaining in the tank
percAFDM.rem <- (leaf.AFDM$AFDM / mean.initial.AFDM) * 100
# calculate the time in the tank
#date <- c(as.Date(leaf.T1$Date), as.Date(leaf.T2$Date), as.Date(leaf.T3$Date))
#time.step <- c(rep("T1", 30), rep("T2", 30), rep("T3", 30))
# calculate the number of days elapsed
days.elapsed <- as.Date(leaf.AFDM$Date) - as.Date(unique(leaf.initial$Date))
days.elapsed <- as.numeric(days.elapsed)
# add calc variables to data frame
leaf.AFDM <- data.frame(leaf.AFDM, percAFDM.rem, days.elapsed)
##### Function designation
k.tank <- function() {
k <- numeric(0)
treat <- character(0)
tank_name = unique(leaf.AFDM$BagTank)
index = seq_along(tank_name)
for(i in index) {
treat[i] <- as.character(leaf.AFDM$treatment[index == i])[1]
k[i] <- coef(summary(lm(log(leaf.AFDM$percAFDM.rem + 1)[index == i] ~ leaf.AFDM$days.elapsed[index == i])))[2, 1] # this extracts the slope (col 2, row 1) from the matrix of coefficents produced by the lm
}
data.frame(tank_name, treat, k)
}
# run the function
k.list <- k.tank()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "L", "E", "H", "I"))
k.list
N.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "N")
I.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "I")
L.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "L")
E.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "E")
k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only"),
) +
theme_classic()
#k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only"),
) +
theme_classic()
N.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "N")
I.k <- lm(log(percAFDM.rem + 1) ~ days.elapsed, data = leaf.AFDM, subset = treatment == "I")
k.list
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "L", "E", "H", "I"))
View(k.list)
k.list
treat <- read.table("./data/tank_map.csv", header = T, sep = ",")
##### Function designation
k.tank <- function() {
k <- numeric(0)
treat <- character(0)
tank_name = unique(leaf.AFDM$BagTank)
index = seq_along(tank_name)
for(i in index) {
treat[i] <- as.character(leaf.AFDM$treatment[index == i])[1]
k[i] <- coef(summary(lm(log(leaf.AFDM$percAFDM.rem + 1)[index == i] ~ leaf.AFDM$days.elapsed[index == i])))[2, 1] # this extracts the slope (col 2, row 1) from the matrix of coefficents produced by the lm
}
data.frame(tank_name, treat, k)
}
# run the function
k.list <- k.tank()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "L", "E", "H", "I"))
k.list
leaf.initial <- read.table("./data/initial_leaf_mass.csv", header = T, sep = ",")
leaf.T1 <- read.table("./data/T1_leaf_mass.csv", header = T, sep = ",")
leaf.T2 <- read.table("./data/T2_leaf_mass.csv", header = T, sep = ",")
leaf.T3 <- read.table("./data/T3_leaf_mass.csv", header = T, sep = ",")
treat <- read.table("./data/tank_map.csv", header = T, sep = ",")
leaf.T1 <- merge(leaf.T1, treat, by.x = "BagTank", by.y = "tank")
leaf.T2 <- merge(leaf.T2, treat, by.x = "BagTank", by.y = "tank")
leaf.T3 <- merge(leaf.T3, treat, by.x = "BagTank", by.y = "tank")
This calculates the AFDM of the leaves before they were incubated in the tanks.
initialDM <- leaf.initial$CrucLeafDM - leaf.initial$CrucMass
initialAM <- leaf.initial$CrucAM - leaf.initial$CrucMas
AFDM <- initialDM - initialAM
leaf.initial <- data.frame(leaf.initial, AFDM)
mean.initial.AFDM <- mean(AFDM)
T1DM <- leaf.T1$CrucLeafDM - leaf.T1$CrucMass
T1AM <- leaf.T1$CrucAM - leaf.T1$CrucMass
AFDM <- T1DM - T1AM
leaf.T1 <- data.frame(leaf.T1, AFDM)
T2DM <- leaf.T2$CrucLeafDM - leaf.T2$CrucMass
T2AM <- leaf.T2$CrucAM - leaf.T2$CrucMass
AFDM <- T2DM - T2AM
leaf.T2 <- data.frame(leaf.T2, AFDM)
T3DM <- leaf.T3$CrucLeafDM - leaf.T3$CrucMass
T3AM <- leaf.T3$CrucAM - leaf.T3$CrucMass
AFDM <- T3DM - T3AM
leaf.T3 <- data.frame(leaf.T3, AFDM)
Due to an error when stocking, tanks 3 and 4 had C. longulus individuals added to in addition to the target species.
These tanks were removed from the analysis.
# create a single data frame with the T1 - T3 AFDM
leaf.AFDM.raw <- rbind(leaf.T1, leaf.T2, leaf.T3)
# remove tanks 3 and 4 from the dataset
leaf.AFDM <- leaf.AFDM.raw[leaf.AFDM.raw$BagTank != 3 & leaf.AFDM.raw$BagTank != 4,]
# convert to percent remaining in the tank
percAFDM.rem <- (leaf.AFDM$AFDM / mean.initial.AFDM) * 100
# calculate the time in the tank
#date <- c(as.Date(leaf.T1$Date), as.Date(leaf.T2$Date), as.Date(leaf.T3$Date))
#time.step <- c(rep("T1", 30), rep("T2", 30), rep("T3", 30))
# calculate the number of days elapsed
days.elapsed <- as.Date(leaf.AFDM$Date) - as.Date(unique(leaf.initial$Date))
days.elapsed <- as.numeric(days.elapsed)
# add calc variables to data frame
leaf.AFDM <- data.frame(leaf.AFDM, percAFDM.rem, days.elapsed)
The function below, runs a linear model on the natural log of the percent leaf mass remaining by the number of days in the tank.  The function then extracts only the slope of the line and makes a data frame that matches the slope, tank number, treatment, and block.
Since two of the tanks had a percent mass remiaining of 0 on the final day, 1 was added to the percent mass remaining to avoid taking the natural log of 0.
##### Function designation
k.tank <- function() {
k <- numeric(0)
treat <- character(0)
tank_name = unique(leaf.AFDM$BagTank)
index = seq_along(tank_name)
for(i in index) {
treat[i] <- as.character(leaf.AFDM$treatment[index == i])[1]
k[i] <- coef(summary(lm(log(leaf.AFDM$percAFDM.rem + 1)[index == i] ~ leaf.AFDM$days.elapsed[index == i])))[2, 1] # this extracts the slope (col 2, row 1) from the matrix of coefficents produced by the lm
}
data.frame(tank_name, treat, k)
}
# run the function
k.list <- k.tank()
##### Replace the treatment names in k.list with more logical level names
k.list$treat <- factor(k.list$treat, levels = c("N", "L", "E", "H", "I"))
k.list
#k_by_treat <-
ggplot(k.list, mapping = aes(y = k, x = factor(treat))) +
geom_jitter(
width = 0.1,
color = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
labs(
y = expression(days^{-1}),
x = " "
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only"),
) +
theme_classic()
library("lmerTest")
ysi <- read.table("./data/tank_YSI.csv", header = T, sep = ",")
chl <- read.table("./data/tank_chl.csv", header = T, sep = ",")
treat <- read.table("./data/tank_map.csv", header = T, sep = ",")
chl <- merge(chl, treat, by = "tank")
chl.trunk <- chl
chl.trunk$Chl[chl.trunk$Chl < 0 ] <- NA
chl.trunk <- chl.trunk[chl.trunk$tank != 3 & chl.trunk$tank != 4,]
days.elapsed <- as.numeric(as.Date(chl.trunk$Date) - as.Date("2016-06-03"))
chl.trunk <- data.frame(chl.trunk, days.elapsed)
chl.trunk$treatment <- factor(chl.trunk$treatment, levels = c("N", "L", "E", "H", "I"))
ggplot(chl.trunk, mapping = aes(y = Chl, x = treatment)) +
geom_jitter(
width = 0.1,
col = 8
) +
stat_summary(
fun = mean,
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x)
) +
facet_wrap(
~ Date
) +
labs(
x = " ",
y = expression("Chlorophyll ("*mu*g~L^{-1}*")")
) +
scale_x_discrete(
labels = c("Native Only", "Low Density", "Equal Density", "High Density", "Invasive Only")
) +
theme_classic()
